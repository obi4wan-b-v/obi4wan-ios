// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name OBI4chatSDK
import AVKit
import Alamofire
import CoreData
import Foundation
import Lottie
import MobileCoreServices
@_exported import OBI4chatSDK
import Photos
import PhotosUI
import PusherSwift
import Reachability
import Swift
import UIKit
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class NetworkManager : ObjectiveC.NSObject {
  public var reachability: Reachability.Reachability!
  public static var sharedInstance: OBI4chatSDK.NetworkManager
  public func observeReachability()
  public static func isReachable(completed: @escaping (OBI4chatSDK.NetworkManager) -> Swift.Void)
  public static func isUnreachable(completed: @escaping (OBI4chatSDK.NetworkManager) -> Swift.Void)
  public static func isReachableViaWWAN(completed: @escaping (OBI4chatSDK.NetworkManager) -> Swift.Void)
  public static func isReachableViaWiFi(completed: @escaping (OBI4chatSDK.NetworkManager) -> Swift.Void)
  @objc deinit
}
@objc public class OBIMessage : ObjectiveC.NSObject, Swift.Codable {
  final public let content: Swift.String?
  final public let type: Swift.String
  final public let author: OBI4chatSDK.OBIAuthor?
  final public let attachment: OBI4chatSDK.OBIAttachment?
  public var date: Swift.String
  public var choices: [Swift.String]?
  public init(content: Swift.String?, type: Swift.String, author: OBI4chatSDK.OBIAuthor?, attachment: OBI4chatSDK.OBIAttachment?, date: Swift.String, choices: [Swift.String] = [])
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum OBIMessageType : Swift.String, Swift.Codable {
  case agent
  case user
  case typing
  case waiting
  case bot
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_inheritsConvenienceInitializers @objc public class ExternalChatConfigurationModel : ObjectiveC.NSObject {
  public var saveChatHistory: Swift.Bool?
  public var emailFormText: Swift.String?
  public var emailFormKeys: [Swift.String]?
  public var preChatFormText: Swift.String?
  public var preChatFormKeys: [Swift.String]?
  public var widgetDisplay: Swift.String?
  public var unavailableHeader: Swift.String?
  public var unavailableText: Swift.String?
  public var canSendAttachment: Swift.Bool?
  public var noAgentsAvailableText: Swift.String?
  public var widgetText: Swift.String?
  public var widgetTitle: Swift.String?
  public var widgetSubtitle: Swift.String?
  public var widgetWelcomeLine: Swift.String?
  public var widgetLogoURI: Swift.String?
  public var widgetColor: Swift.String?
  public var widgetLanguage: Swift.String?
  public var widgetPosition: Swift.String?
  public var autoTriggerEnabled: Swift.Bool?
  public var autoTriggerDelaySeconds: Swift.Int?
  public var autoTriggerText: Swift.String?
  public var autoTriggerCooldownTime: Swift.Int?
  public var autoTriggerTriggerOnlyOnce: Swift.Bool?
  public var showMessageTimestamp: Swift.Bool?
  @objc deinit
  @objc override dynamic public init()
}
@objc public class ClientTyping : ObjectiveC.NSObject, Swift.Codable {
  final public let typing: Swift.Bool
  public init(typing: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class OBIAttachment : ObjectiveC.NSObject, Swift.Codable {
  final public let url: Swift.String
  final public let type: Swift.String?
  final public let name: Swift.String
  public init(url: Swift.String, type: Swift.String?, name: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc public class OBIAuthor : ObjectiveC.NSObject, Swift.Codable {
  final public let url: Swift.String?
  final public let name: Swift.String
  public var guid: Swift.String?
  public init(url: Swift.String, name: Swift.String, guid: Swift.String)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public enum HorizontalAlignment {
  case left
  case right
  case leading
  case trailing
  case justified
  public static func == (a: OBI4chatSDK.HorizontalAlignment, b: OBI4chatSDK.HorizontalAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum VerticalAlignment {
  case top
  case center
  case bottom
  public static func == (a: OBI4chatSDK.VerticalAlignment, b: OBI4chatSDK.VerticalAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc open class AlignedCollectionViewFlowLayout : UIKit.UICollectionViewFlowLayout {
  public var horizontalAlignment: OBI4chatSDK.HorizontalAlignment
  public var verticalAlignment: OBI4chatSDK.VerticalAlignment
  public init(horizontalAlignment: OBI4chatSDK.HorizontalAlignment = .justified, verticalAlignment: OBI4chatSDK.VerticalAlignment = .center)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc deinit
  @objc override dynamic public init()
}
@objc public class OBI4Chat : ObjectiveC.NSObject {
  @objc public init(appGuid: Swift.String, userGuid: Swift.String? = nil, userName: Swift.String? = nil, botId: Swift.String? = nil, enableLauncher: Swift.Bool, externalConfiguration: OBI4chatSDK.ExternalChatConfigurationModel? = nil, externalStyle: OBI4chatSDK.ExternalStyle? = nil)
  @objc public func isChatAvailable(_ completion: @escaping (OBI4chatSDK.ChatAvailability) -> Swift.Void)
  @objc public func openChat(in viewController: UIKit.UIViewController? = nil)
  @objc public func startBotSessionIfNeeded()
  @objc public func getCurrentUserGuid() -> Swift.String
  @objc public func getCurrentBotId() -> Swift.String
  @objc public func deleteChatHistory()
  @objc public func restartChat(userGuid: Swift.String? = nil, botId: Swift.String? = nil)
  @objc public func closeChatSession()
  @objc public func sendMessage(message: OBI4chatSDK.OBIMessage, shouldSave: Swift.Bool)
  @objc public func sendTyping(typing: OBI4chatSDK.ClientTyping)
  @objc deinit
  @objc override dynamic public init()
}
@objc public protocol OBI4ChatObserver : AnyObject {
  @objc func obi4Chat(_ chat: OBI4chatSDK.OBI4Chat, didReceiveNewMessage message: OBI4chatSDK.OBIMessage)
  @objc func obi4Chat(_ chat: OBI4chatSDK.OBI4Chat, didReceiveTyping typing: OBI4chatSDK.ClientTyping)
  @objc func obi4ChatInited(_ chat: OBI4chatSDK.OBI4Chat)
  @objc func obi4ChatPreformSubmitted(_ chat: OBI4chatSDK.OBI4Chat)
}
@objc extension OBI4Chat {
  @objc dynamic public func addObserver(_ observer: OBI4chatSDK.OBI4ChatObserver)
  @objc dynamic public func removeObserver(_ observer: OBI4chatSDK.OBI4ChatObserver)
}
@objc public class ChatAvailability : ObjectiveC.NSObject, Swift.Codable {
  final public let available: Swift.Bool
  public init(available: Swift.Bool)
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
precedencegroup NullabilityPrecedence {
  associativity: right
  higherThan: AssignmentPrecedence
}
infix operator ?= : NullabilityPrecedence
extension URLRequest {
  public var curlString: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class AlertUtil : ObjectiveC.NSObject {
  public static func showAlert(title: Swift.String, message: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class ExternalStyle : ObjectiveC.NSObject {
  public var incomingBalloon: OBI4chatSDK.BalloonStyle?
  public var outgoingBalloon: OBI4chatSDK.BalloonStyle?
  public var timestamp: OBI4chatSDK.FontStyle?
  public var sendButton: OBI4chatSDK.FontStyle?
  public var sendButtonText: Swift.String?
  public var startButtonText: Swift.String?
  public var inputTextField: OBI4chatSDK.FontStyle?
  public var inputTextFieldPlaceholder: Swift.String?
  public var headerTitle: OBI4chatSDK.FontStyle?
  public var headerSubtitle: OBI4chatSDK.FontStyle?
  public var headerTextColor: UIKit.UIColor?
  public var formSentTitle: Swift.String?
  public var formSentSubtitle: Swift.String?
  public var backgroundColor: UIKit.UIColor?
  public var buttonBorderColor: UIKit.UIColor?
  public var buttonFillColor: UIKit.UIColor?
  public var buttonColorNormal: UIKit.UIColor?
  public var buttonColorDisabled: UIKit.UIColor?
  public var buttonTextColor: UIKit.UIColor?
  public var buttonFontSize: CoreGraphics.CGFloat?
  public var buttonFontWeight: CoreGraphics.CGFloat?
  public var buttonFont: Swift.String?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class BalloonStyle : ObjectiveC.NSObject {
  public var fontStyle: OBI4chatSDK.FontStyle?
  public var textColor: UIKit.UIColor?
  public var backgroundColor: UIKit.UIColor?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class FontStyle : ObjectiveC.NSObject {
  public var name: Swift.String?
  public var size: CoreGraphics.CGFloat?
  @objc deinit
  @objc override dynamic public init()
}
